package handlers

import (
	"att-diplom/internal/functions"
	"att-diplom/internal/helper"
	"att-diplom/internal/types"
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"os"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func UpdateApplicationHandler(w http.ResponseWriter, r *http.Request, db *sql.DB, bot *tgbotapi.BotAPI) {
	if r.Method != http.MethodPut {
		http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
		return
	}
	var application types.ApplicationUpdateRequest
	err := json.NewDecoder(r.Body).Decode(&application)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", http.StatusBadRequest)
		return
	}
	id, err := strconv.Atoi(application.ID)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:", err)
		return
	}
	startDate, err := time.Parse("2006-01-02", application.StartDate)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç startDate. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD", http.StatusBadRequest)
		return
	}

	var endDate sql.NullTime
	if application.EndDate != nil && *application.EndDate != "" {
		parsedEndDate, err := time.Parse("2006-01-02", *application.EndDate)
		if err != nil {
			http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç endDate. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD", http.StatusBadRequest)
			return
		}
		endDate = sql.NullTime{Time: parsedEndDate, Valid: true}
	} else {
		endDate = sql.NullTime{Valid: false}
	}
	newApplication := types.Application{
		Description: helper.NewNullString(application.Description.String),
		NameTeacher: helper.NewNullString(application.NameTeacher.String),
		IDEngineer:  helper.NewNullInt64(application.IDEngineer.String),
		Status:      helper.NewNullString(application.Status.String),
		StartDate:   startDate,
		EndDate:     endDate,
		Cabinet:     helper.NewNullString(application.Cabinet.String),
		ID:          id,
	}
	err = functions.UpdateApplication(db, newApplication)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	chatIdStr := os.Getenv("TELEGRAM_CHAT_ID")
	if chatIdStr == "" {
		log.Println("–û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	} else {
		chatId, err := strconv.ParseInt(chatIdStr, 10, 64)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è chatId:", err)
		} else {
			engineerText := "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
			if application.IDEngineer.Valid && application.IDEngineer.String != "" {
				engineerID, err := strconv.Atoi(application.IDEngineer.String)
				if err != nil {
					log.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –∏–Ω–∂–µ–Ω–µ—Ä–∞:", err)
					http.Error(w, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∏–Ω–∂–µ–Ω–µ—Ä–∞", http.StatusBadRequest)
					return
				}

				engineer, err := functions.GetEngineerByID(db, engineerID)
				if err == nil {
					engineerText = engineer.Name
				} else {
					log.Println("–ò–Ω–∂–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
				}
			}

			message := fmt.Sprintf("üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ ‚Ññ%d\n–û–ø–∏—Å–∞–Ω–∏–µ: %s\n–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: %s\n–ö–∞–±–∏–Ω–µ—Ç: %s\n–°—Ç–∞—Ç—É—Å: %s\n–ò–Ω–∂–µ–Ω–µ—Ä: %s",
				id, application.Description.String, application.NameTeacher.String, application.Cabinet.String, application.Status.String, engineerText)

			if err := functions.SendMessage(bot, chatId, message); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", err)
			} else {
				log.Println("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
			}
		}
	}

	w.WriteHeader(http.StatusOK)
}
